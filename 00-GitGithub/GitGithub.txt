1.  Membuat user.name
    * git config --global user.name "namauser"

2.  Membuat email
    * git config --global user.email "email@mail.com"

3.  Init repositery
    * git Init

4.  Add file/repo ke stagging area
    * git add namafile

    Add semua file/repo ke stagging area
    * git add .

5.  Cek status
    * git status

6.  Unstage / mengembalikan file ke modification area
    * git rm --cached namafile

7.  Commit
    * git commit -m "message"

8.  Cek log/history
    * git log
    * git log -n / n diisi dengan angka untuk menampilkan commit n terakhir
    * git log -- namaFile / cek log pada file tertentu

    Menjadikan 1 baris agar mudah dibaca
    * git log --oneline

9.  Checkout / melihat kembal perubahan dari commit tertentu
    * git checkout unique_id

    Kembali ke checkout master branch
    * git checkout master

    Revert / Mengembalikan semua perubahan yang terjadi pada baris kode menjadi commit terakhir
    * git revert unique_id

    Reset / Delete semua perubahan pada baris kode ke id tertentu tetapi tidak pada codingannya
    * git reset unique_id

    Reset / Delete semua perubahan pada baris kode ke id tertentu dan menghapus semua codingannya sesua unique_id
    * git reset unique_id --hard

10. Branch = Membuat branch / percabangan dari master branch
    * git branch namaBranch
    * contoh = git branch feature-1

    Melihat semua branch yang ada didalam repo
    * git branch -a

    Cara lain membuat brach dan langsung melihatnya
    * git checkout -b namaBranch

    Pindah ke antar branch
    * git checkout namaBranch

    NOTE : Setelah menyelesaikan codignan dari branch cabang, lakukan add dan commit.

    Delete branch. NOTE: kembali ke branch master dulu
    * git branch -d namaBranch (untuk branch yang sudah di merge)
    * git branch -D namaBranch (untuk branch yang belum di merge)
    
    Cek file yang di merge
    * git branch --merged

11. Merge = menggabungkan branch ke master branch
    NOTE : Sebelum melakukan merge, Kembali dulu ke master branch -> git checkout master
    * git merge namaBranch

12. Merge Conflict = Terjadi perbedaan antara source code master dan branch ketika di merge
    * Pilih code mana yang mau ditambahkan/dihilangkan
    * git add . -> git commit -m "pesan commit"

13. Remote
    Clone = Clone repo cloud menjadi repo local
    * git clone https://linkRepoCloud

    Repo lokal menjadi origin
    * Buat direktori dengan nama yang sama dengan nama direktori lokal repo
    * git remote add origin https://linkRepoCloud
    * git push -u origin master / supaya push langsung ke cloud repo

    Cek remote yang terhubung
    * git remote
    * git remote -v / cek secara spesifik (menampilkan link cloud repo)

14. Conflict push
    Terjadi karena ada perubahan di cloud repo sementara di repo lokal masih memakai source code yang lama
    * git fetch = Untuk cek perubahan yang ada di cloud repo
    * git pull  = Untuk mengambil perubahan yang ada di cloud repo
    Setelah itu dipilih yang mau ditambahkan/dihilangkan dan lakukan commit lagi dan push lagi

15. Git ignore
    .gitignore adalah file yang berisi pengecualian untuk di commit. Letakan file .gitignore didalam direktori git.

16. Rebase
    Rebase adalah menjadikan branch menjadi satu cabang atau fast-forward.
    * git rebase
